# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("example-slave", "pass")]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        'git@github.com:makeably/makedit.git',
        workdir='gitpoller-workdir', branches=['master', 'ci'],
        pollinterval=30))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.basic import AnyBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="master",
                            change_filter=filter.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["runtests"]))
c['schedulers'].append(SingleBranchScheduler(
                            name="ci",
                            change_filter=filter.ChangeFilter(branch='ci'),
                            treeStableTimer=None,
                            builderNames=["runtests"]))
c['schedulers'].append(ForceScheduler(
                            name="force",
                            builderNames=["runtests"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import Test

factory = BuildFactory()
env = {'RAILS_ENV': 'test'}

# check out the source
factory.addStep(Git(repourl='git@github.com:makeably/makedit.git', mode='incremental'))

#  Step to setup database.yml
factory.addStep(ShellCommand(name="Init database.yml", haltOnFailure=True, command=["cp", "/home/ubuntu/database.yml", "config"]))
factory.addStep(ShellCommand(name="Install Rails dependencies", command=["bundle", "install"], env=env))

factory.addStep(ShellCommand(name="Drop db", command=["rake", "db:drop"], env=env))
factory.addStep(ShellCommand(name="Create db", command=["rake", "db:create"], env=env))
factory.addStep(ShellCommand(name="Prepare db", command=["rake", "db:test:load"], env=env))
factory.addStep(Test(name="Test routing", command=["rake", "spec:routing"], env=env))
factory.addStep(Test(name="Test mailers", command=["rake", "spec:mailers"], env=env))
factory.addStep(Test(name="Test models", command=["rake", "spec:models"], env=env))
factory.addStep(Test(name="Test controllers", command=["rake", "spec:controllers"], env=env))

#  Karma testing.
factory.addStep(ShellCommand(name="Install Karma dependencies", command=["bower", "install"], env=env))
factory.addStep(Test(name="Karma testing", command=["karma", "start"], env=env))

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="runtests",
      slavenames=["example-slave"],
      factory=factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("buildbot", "makeitso"), ("john", "makeitso"), ("noah", "makeitso"), ("dale", "makeitso")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

from buildbot.status.mail import MailNotifier
mn = MailNotifier(fromaddr="tech@hatch.co",
                  sendToInterestedUsers=False,
                  extraRecipients=["builds@hatch.co"],
                  useTls=True,
                  relayhost="email-smtp.us-east-1.amazonaws.com", smtpPort=587,
                  smtpUser="AKIAIO75BV6WENP6CYCA", smtpPassword="Amp4H2AY34n3ofhkuMj7G7OrhgM7bO/8g8CI37hrxBDp")
c['status'].append(mn)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Hatch"
c['titleURL'] = "https://www.hatch.co"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://buildbot.hatch.co:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
